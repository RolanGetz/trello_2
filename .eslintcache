[{"D:\\www\\react-js\\trello\\src\\App.jsx":"1","D:\\www\\react-js\\trello\\src\\index.js":"2"},{"size":3849,"mtime":1612638179278,"results":"3","hashOfConfig":"4"},{"size":211,"mtime":1612263189156,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"8"},"latvml",{"filePath":"9","messages":"10","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\www\\react-js\\trello\\src\\App.jsx",["11","12"],"import React, {useState} from 'react';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n    const [boards, setBoards] = useState([\r\n        {\r\n            id: 1,\r\n            title: \"Сделать\",\r\n            items: [{id: 1, title: \"Выучить Graphql\"}, {id: 2, title: \"Написать песню\"}, {\r\n                id: 3,\r\n                title: \"Пойти в баню\"\r\n            }, {id: 4, title: \"Улететь в космос\"}, {id: 5, title: \"Заняться спортом\"}, {id: 6, title: \"Побриться\"}]\r\n        },\r\n        {id: 2, title: \"Проверить\", items: []},\r\n        {id: 3, title: \"Сделано\", items: []}\r\n    ])\r\n    const [currentBoard, setCurrentBoard] = useState(null)\r\n    const [currentItem, setCurrentItem] = useState(null)\r\n\r\n    function dragOverHandler(e) {\r\n        e.preventDefault()\r\n        if (e.target.className == 'item') {\r\n            e.target.style.boxShadow = '0 4px 3px gray'\r\n        }\r\n    }\r\n\r\n    function dragLeaveHandler(e) {\r\n        e.target.style.boxShadow = 'none'\r\n    }\r\n\r\n    function dragStartHandler(e, board, item) {\r\n        setCurrentBoard(board)\r\n        setCurrentItem(item)\r\n    }\r\n\r\n    function dragEndHandler(e) {\r\n        e.target.style.boxShadow = 'none'\r\n    }\r\n\r\n    function dropHandler(e, board, item) {\r\n        e.preventDefault()\r\n        const currentIndex = currentBoard.items.indexOf(currentItem)\r\n        currentBoard.items.splice(currentIndex, 1)\r\n        const dropIndex = board.items.indexOf(item)\r\n        board.items.splice(dropIndex + 1, 0, currentItem)\r\n        setBoards(boards.map(b => {\r\n            if (b.id === board.id) {\r\n                return board\r\n            }\r\n            if (b.id === currentBoard.id) {\r\n                return currentBoard\r\n            }\r\n            return b\r\n        }))\r\n        e.target.style.boxShadow = 'none'\r\n    }\r\n\r\n    function dropCardHandler(e, board) {\r\n        board.items.push(currentItem)\r\n        const currentIndex = currentBoard.items.indexOf(currentItem)\r\n        currentBoard.items.splice(currentIndex, 1)\r\n        setBoards(boards.map(b => {\r\n            if (b.id === board.id) {\r\n                return board\r\n            }\r\n            if (b.id === currentBoard.id) {\r\n                return currentBoard\r\n            }\r\n            return b\r\n        }))\r\n        e.target.style.boxShadow = 'none'\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {/*<div className=\"wrap\">*/}\r\n\r\n                <div className=\"app\">\r\n                    <div className=\"title\"><h1>Trello)</h1></div>\r\n                    {boards.map(board =>\r\n                        <div\r\n                            className='board'\r\n                            onDragOver={(e) => dragOverHandler(e)}\r\n                            onDrop={(e) => dropCardHandler(e, board)}\r\n                        >\r\n                            <div className=\"board__title\">{board.title}</div>\r\n                            {board.items.map(item =>\r\n                                <div\r\n                                    onDragOver={(e) => dragOverHandler(e)}\r\n                                    onDragLeave={e => dragLeaveHandler(e)}\r\n                                    onDragStart={(e) => dragStartHandler(e, board, item)}\r\n                                    onDragEnd={(e) => dragEndHandler(e)}\r\n                                    onDrop={(e) => dropHandler(e, board, item)}\r\n                                    className=\"todo\"\r\n                                    draggable={true}\r\n                                    className=\"item\">\r\n                                    {item.title}\r\n                                </div>\r\n                            )}\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            {/*</div>*/}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","D:\\www\\react-js\\trello\\src\\index.js",[],{"ruleId":"13","severity":1,"message":"14","line":22,"column":32,"nodeType":"15","messageId":"16","endLine":22,"endColumn":34},{"ruleId":"17","severity":1,"message":"18","line":96,"column":37,"nodeType":"19","endLine":96,"endColumn":53},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute"]